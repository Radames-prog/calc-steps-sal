{"version":3,"sources":["logo.svg","components/FaixasSalariais.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FaixasSalariais","props","state","salario","amplitude","calcular","bind","fimAmplitude","parseFloat","this","fimAmpl","setState","faixa1","percentual","faixaTwo","faixa2","toFixed","faixaTri","faixa3","faixaFour","faixa4","faixaFive","faixa5","faixa6","text","className","type","defaultValue","placeholder","onChange","event","target","value","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,2KCKtBC,G,wBACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACTC,QAAQ,SACRC,UAAU,MAMf,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAXD,E,wEAed,IAAIC,EAAeC,WAAWC,KAAKP,MAAMC,SAAY,IAAMK,WAAWC,KAAKP,MAAME,WAAaI,WAAWC,KAAKP,MAAMC,SAChHO,EAAO,4BAAqBH,GAChCE,KAAKE,SAAS,CAACD,YACf,IAAIE,EAAM,8BAAuBH,KAAKP,MAAMC,SAC5CM,KAAKE,SAAS,CAACC,WAEf,IAAIC,EAAaJ,KAAKP,MAAME,UAAY,EACpCU,EAAWN,WAAWC,KAAKP,MAAMC,SAAY,IAAMU,EAAaL,WAAWC,KAAKP,MAAMC,SACtFY,EAAM,mBAAeD,EAASE,QAAQ,IAC1CP,KAAKE,SAAS,CAACI,WAEf,IAAIE,EAAWH,EAAY,IAAMD,EAAaC,EAC1CI,EAAM,mBAAeD,EAASD,QAAQ,IAC1CP,KAAKE,SAAS,CAACO,WAEf,IAAIC,EAAYF,EAAY,IAAMJ,EAAaI,EAC3CG,EAAM,mBAAeD,EAAUH,QAAQ,IAC3CP,KAAKE,SAAS,CAACS,WAEf,IAAIC,EAAYF,EAAa,IAAMN,EAAaM,EAC5CG,EAAM,mBAAeD,EAAUL,QAAQ,IAC3CP,KAAKE,SAAS,CAACW,WAEf,IACIC,EAAM,oBADKF,EAAa,IAAMR,EAAaQ,GACbL,QAAQ,IAC1CP,KAAKE,SAAS,CAACY,WAEf,IAAIC,EAAI,yGACHX,EAAWG,QAAQ,GADhB,4DACmEP,KAAKP,MAAME,UAD9E,6CAERK,KAAKE,SAAS,CAACa,W,+BAKV,IAAD,OACJ,OACG,yBAAKC,UAAU,UACV,oEACA,2BAAOC,KAAK,OAAOC,aAAa,GAAGC,YAAY,sCAC/CC,SAAU,SAACC,GAAS,EAAKnB,SAAS,CAACR,QAAQ2B,EAAMC,OAAOC,WACxD,2BAAON,KAAK,OAAOC,aAAa,GAAGC,YAAY,4CAC/CC,SAAU,SAACC,GAAS,EAAKnB,SAAS,CAACP,UAAU0B,EAAMC,OAAOC,WAC1D,2BAAON,KAAK,SAASM,MAAM,WAAUC,QAASxB,KAAKJ,WAE/D,4BAAKI,KAAKP,MAAMU,QACZ,4BAAKH,KAAKP,MAAMa,QAChB,4BAAKN,KAAKP,MAAMgB,QAChB,4BAAKT,KAAKP,MAAMkB,QAChB,4BAAKX,KAAKP,MAAMoB,QAChB,4BAAKb,KAAKP,MAAMqB,QACpB,4BAAKd,KAAKP,MAAMQ,SACZ,4BAAKD,KAAKP,MAAMsB,W,GAnEqBU,cCQ9BC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCIcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a2e056d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './FaixasSalariais.css'\r\n\r\n\r\nexport default class FaixasSalariais extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            salario:'998,00',\r\n            amplitude:'50',\r\n            \r\n\r\n\r\n        }\r\n\r\n       this.calcular = this.calcular.bind(this) \r\n    }\r\n    calcular(){\r\n\r\n        let fimAmplitude = parseFloat(this.state.salario)  / 100 * parseFloat(this.state.amplitude) + parseFloat(this.state.salario)\r\n        let fimAmpl = `Salário Final: ${fimAmplitude}`\r\n        this.setState({fimAmpl})\r\n        let faixa1 = `Salário Inicial: ${this.state.salario}`\r\n        this.setState({faixa1})\r\n\r\n        let percentual = this.state.amplitude / 7\r\n        let faixaTwo = parseFloat(this.state.salario)  / 100 * percentual + parseFloat(this.state.salario) \r\n        let faixa2 = `Faixa 2: ${faixaTwo.toFixed(2)}`\r\n        this.setState({faixa2})\r\n\r\n        let faixaTri = faixaTwo  / 100 * percentual + faixaTwo \r\n        let faixa3 = `Faixa 3: ${faixaTri.toFixed(2)}`\r\n        this.setState({faixa3})\r\n\r\n        let faixaFour = faixaTri  / 100 * percentual + faixaTri\r\n        let faixa4 = `Faixa 4: ${faixaFour.toFixed(2)}`\r\n        this.setState({faixa4})\r\n\r\n        let faixaFive = faixaFour  / 100 * percentual + faixaFour\r\n        let faixa5 = `Faixa 5: ${faixaFive.toFixed(2)}`\r\n        this.setState({faixa5})\r\n\r\n        let faixaSix = faixaFive  / 100 * percentual + faixaFive\r\n        let faixa6 = `Faixa 6: ${faixaSix.toFixed(2)}`\r\n        this.setState({faixa6})\r\n\r\n        let text = `O exemplo acima mostra uma Faixa Salarial com sete níveis ou “steps” \r\n        de ${percentual.toFixed(2)}% cada, formando uma extensão ou amplitude de ${this.state.amplitude}% entre o início e o Salário final.`\r\n        this.setState({text})\r\n        \r\n\r\n\r\n    }\r\n    render(){\r\n        return(\r\n           <div className=\"faixas\">\r\n                <h1>Caluladora de Faixas/Steps Salariais</h1>\r\n                <input type=\"text\" defaultValue=\"\" placeholder=\"Ex: 998,00 para o salário inicio\"\r\n                onChange={(event)=>{this.setState({salario:event.target.value})}}></input>\r\n                <input type=\"text\" defaultValue=\"\" placeholder=\"Para aumento final de 50% informar Ex: 50\"\r\n                onChange={(event)=>{this.setState({amplitude:event.target.value})}}></input>\r\n                <input type=\"button\" value=\"Calcular\"onClick={this.calcular}></input>\r\n\r\n    <h2>{this.state.faixa1}</h2>\r\n        <h2>{this.state.faixa2}</h2>\r\n        <h2>{this.state.faixa3}</h2>\r\n        <h2>{this.state.faixa4}</h2> \r\n        <h2>{this.state.faixa5}</h2>\r\n        <h2>{this.state.faixa6}</h2>        \r\n    <h2>{this.state.fimAmpl}</h2>\r\n        <h5>{this.state.text}</h5> \r\n                    \r\n            \r\n           </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CalcFaixasSalariais from './components/FaixasSalariais'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <CalcFaixasSalariais/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}